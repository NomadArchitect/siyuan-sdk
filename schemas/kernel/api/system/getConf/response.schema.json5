/**
 * schemas/kernel/api/system/getConf/response.schema.json5
 * 获取工作空间完整配置
 * REF: https://github.com/siyuan-note/siyuan/blob/v2.11.3/kernel/api/system.go#L206-L225
 * @pathname: /api/system/getConf
 * @version: 2.11.3
 */
{
    $schema: 'https://json-schema.org/draft/2020-12/schema',
    $id: 'https://github.com/siyuan-community/siyuan-sdk/raw/main/schemas/kernel/api/system/getConf/response.schema.json5',
    $comment: 'v2.11.3',
    $ref: '#/$defs/root',
    $defs: {
        root: {
            title: 'response body',
            description: '',

            type: 'object',
            additionalProperties: false,
            required: ['code', 'msg', 'data'],
            properties: {
                code: {
                    type: 'integer',
                    description: 'status code',
                },
                msg: {
                    type: 'string',
                    description: 'status message',
                },
                data: {
                    $ref: '#/$defs/data',
                },
            },
        },
        data: {
            title: 'IData',
            description: 'response data',

            type: 'object',
            additionalProperties: false,
            required: ['start', 'conf'],
            properties: {
                start: {
                    // 是否未加载用户界面
                    type: 'boolean',
                    description: 'Whether the user interface is not loaded',
                },
                conf: {
                    // 配置对象
                    $ref: '#/$defs/conf',
                },
            },
        },
        conf: {
            title: 'IConf',
            description: 'Configuration object',

            type: 'object',
            additionalProperties: false,
            required: ['accessAuthCode', 'account', 'ai', 'api', 'appearance', 'bazaar', 'cloudRegion', 'editor', 'export', 'fileTree', 'flashcard', 'graph', 'keymap', 'lang', 'langs', 'localIPs', 'logLevel', 'openHelp', 'readonly', 'repo', 'search', 'showChangelog', 'snippet', 'stat', 'sync', 'system', 'tag', 'uiLayout', 'userData'],
            properties: {
                accessAuthCode: {
                    // 访问授权码
                    type: 'string',
                    description: 'Access authorization code',
                    default: '',
                    enum: ['', '*******'],
                },
                account: {
                    // 账户相关配置
                    $ref: '#/$defs/account',
                },
                ai: {
                    // AI 相关配置
                    $ref: '#/$defs/ai',
                },
                api: {
                    // 思源 API 相关配置
                    $ref: '#/$defs/api',
                },
                appearance: {
                    // 外观相关配置
                    $ref: '#/$defs/appearance',
                },
                bazaar: {
                    // 思源集市相关配置
                    $ref: '#/$defs/bazaar',
                },
                cloudRegion: {
                    // 云服务供应商地区
                    type: 'integer',
                    description: 'Cloud Service Provider Region\n- `0`: Chinese mainland\n- `1`: North America',
                    enum: [0, 1],
                },
                editor: {
                    // TODO
                },
                export: {
                    // TODO
                },
                fileTree: {
                    // TODO
                },
                flashcard: {
                    // TODO
                },
                graph: {
                    // TODO
                },
                keymap: {
                    // TODO
                },
                lang: {
                    // 界面语言
                    title: 'TLang',
                    type: 'string',
                    description: 'User interface language  \nSame as {@link IAppearance.lang}',
                    enum: [
                        'en_US', // 英文
                        'es_ES', // 西班牙文
                        'fr_FR', // 法文
                        'zh_CHT', // 繁体中文
                        'zh_CN', // 简体中文
                    ],
                },
                langs: {
                    // 支持的语言列表
                    type: 'array',
                    description: 'List of supported languages',
                    items: {
                        $ref: '#/$defs/lang',
                    },
                },
                localIPs: {
                    // 内核所在设备 IP 列表
                    type: 'array',
                    description: 'A list of the IP addresses of the devices on which the kernel resides',
                    items: {
                        type: 'string',
                        description: 'IP addresses (IPv4 & IPv6)',
                        examples: [
                            '127.0.0.1', //
                            '192.168.1.1', //
                            '10.0.0.1', //
                            '[::1]', //
                            '[fe80::8cc:2a8:23fc:daf3]', //
                        ],
                    },
                },
                logLevel: {
                    // 日志级别
                    title: 'TLogLevel',
                    type: 'string',
                    description: 'Log level',
                    enum: [
                        'off', // 无日志
                        'trace', // 少量
                        'debug', // 调试
                        'info', // 信息
                        'warn', // 警告
                        'error', // 错误
                        'fatal', // 致命
                    ],
                },
                openHelp: {
                    // 启动后是否需要打开用户指南
                    type: 'boolean',
                    description: 'Whether to open the user guide after startup',
                },
                readonly: {
                    // 是否是以只读模式运行
                    type: 'boolean',
                    description: 'Whether it is running in read-only mode',
                },
                repo: {
                    // TODO
                },
                search: {
                    // TODO
                },
                showChangelog: {
                    // 是否显示本版本更新日志
                    type: 'boolean',
                    description: 'Whether to display the changelog for this release version',
                },
                snippet: {
                    // 代码片段相关配置
                    $ref: '#/$defs/snippet',
                },
                stat: {
                    // TODO
                },
                sync: {
                    // TODO
                },
                system: {
                    // TODO
                },
                tag: {
                    // 思源标签面板相关配置
                    $ref: '#/$defs/tag',
                },
                uiLayout: {
                    // TODO
                },
                userData: {
                    // 社区用户信息
                    type: 'string',
                    description: 'Community user data (Encrypted)',
                    default: '',
                },
            },
        },
        account: {
            title: 'IAccount',
            description: 'Account configuration',

            type: 'object',
            additionalProperties: false,
            required: ['displayTitle', 'displayVIP'],
            properties: {
                displayTitle: {
                    // 顶栏显示头衔
                    type: 'boolean',
                    description: 'Display the title icon',
                },
                displayVIP: {
                    // 顶栏显示 VIP 图标
                    type: 'boolean',
                    description: 'Display the VIP icon',
                },
            },
        },
        ai: {
            title: 'IAi',
            type: 'object',

            description: 'Artificial Intelligence (AI) related configuration',
            additionalProperties: false,
            required: ['openAI'],
            properties: {
                openAI: {
                    $ref: '#/$defs/openAI',
                },
            },
        },
        openAI: {
            // Open AI 的 API 配置项
            title: 'IOpenAI',
            description: 'Open AI related configuration',

            type: 'object',
            additionalProperties: false,
            required: ['apiBaseURL', 'apiKey', 'apiMaxTokens', 'apiModel', 'apiProxy', 'apiTimeout'],
            properties: {
                apiBaseURL: {
                    // API 基础 URL 地址
                    type: 'string',
                    description: 'API base URL',
                    format: 'uri',
                    examples: ['https://api.openai.com/v1'],
                },
                apiKey: {
                    // API 密钥
                    type: 'string',
                    description: 'API key',
                    examples: ['sk-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKL'],
                },
                apiTimeout: {
                    // API 请求超时时间 (单位: 秒)
                    type: 'integer',
                    description: 'API request timeout (unit: seconds)',
                    minimum: 0,
                },
                apiProxy: {
                    // API 请求代理地址
                    type: 'string',
                    description: 'API request proxy address',
                    examples: ['http://127.0.0.1:1080', 'socks://127.0.0.1:1080', 'socks5://127.0.0.1:1080'],
                },
                apiModel: {
                    // API 所调用的模型名称
                    title: 'TOpenAIModel',
                    type: 'string',
                    description: 'The model name called by the API',
                    enum: ['gpt-4', 'gpt-4-32k', 'gpt-3.5-turbo', 'gpt-3.5-turbo-16k'],
                },
                apiMaxTokens: {
                    // 最大 Token 数 (0 表示无限制)
                    type: 'integer',
                    description: 'Maximum number of tokens (0 means no limit)',
                    minimum: 0,
                },
                apiProvider: {
                    // API 供应商
                    type: 'string',
                    description: 'API Provider',
                    enum: ['OpenAI', 'Azure'],
                },
                apiUserAgent: {
                    // API 请求附加的用户代理字段
                    type: 'string',
                    description: 'API request additional user agent field',
                },
            },
        },
        api: {
            title: 'IApi',
            type: 'object',

            description: 'SiYuan API related configuration',
            additionalProperties: false,
            required: ['token'],
            properties: {
                token: {
                    type: 'string',
                    description: 'API Token',
                    examples: ['', '0123456789abcdef'],
                },
            },
        },
        appearance: {
            title: 'IAppearance',
            type: 'object',

            description: 'SiYuan appearance related configuration',
            additionalProperties: false,
            required: ['closeButtonBehavior', 'codeBlockThemeDark', 'codeBlockThemeLight', 'darkThemes', 'hideStatusBar', 'icon', 'iconVer', 'icons', 'lang', 'lightThemes', 'mode', 'modeOS', 'themeDark', 'themeJS', 'themeLight', 'themeVer'],
            properties: {
                closeButtonBehavior: {
                    // 关闭按钮行为
                    type: 'integer',
                    description: 'Close button behavior\n- `0`: Exit application\n- `1`: Minimize to pallets',
                    enum: [
                        0, // 退出应用
                        1, // 最小化到托盘
                    ],
                },
                codeBlockThemeDark: {
                    // 暗色代码块主题
                    type: 'string',
                    description: 'Dark code block theme',
                },
                codeBlockThemeLight: {
                    // 亮色代码块主题
                    type: 'string',
                    description: 'Light code block theme',
                },
                darkThemes: {
                    // 已安装的暗色主题名称列表
                    type: 'array',
                    description: 'List of installed dark themes',
                    items: {
                        type: 'string',
                        description: 'Dark theme name',
                    },
                },
                hideStatusBar: {
                    // 是否隐藏状态栏
                    type: 'boolean',
                    description: 'Whether to hide status bar',
                },
                icon: {
                    // 当前使用的图标名称
                    type: 'string',
                    description: 'The name of the icon currently in use',
                },
                iconVer: {
                    // 当前使用的图标的版本号
                    type: 'string',
                    description: 'The version number of the icon currently in use',
                },
                icons: {
                    // 已安装的图标名称列表
                    type: 'array',
                    description: 'List of installed icon names',
                    items: {
                        type: 'string',
                        description: 'Icon name',
                    },
                },
                lang: {
                    // 当前用户界面所使用的语言
                    type: 'string',
                    description: 'The language used by the current user',
                    enum: [
                        'en_US', // 英文
                        'es_ES', // 西班牙文
                        'fr_FR', // 法文
                        'zh_CHT', // 繁体中文
                        'zh_CN', // 简体中文
                    ],
                },
                lightThemes: {
                    // 已安装的亮色主题名称列表
                    type: 'array',
                    description: 'List of installed light themes',
                    items: {
                        type: 'string',
                        description: 'Light theme name',
                    },
                },
                mode: {
                    // 当前使用的主题模式
                    type: 'integer',
                    description: 'The current theme mode\n- `0`: Light theme\n- `1`: Dark theme',
                    enum: [
                        0, // 亮色主题
                        1, // 暗色主题
                    ],
                },
                modeOS: {
                    // 主题模式是否跟随系统主题
                    type: 'boolean',
                    description: 'Whether the theme mode follows the system theme',
                },
                themeDark: {
                    // 当前使用的暗色主题名称
                    type: 'string',
                    description: 'The name of the dark theme currently in use',
                },
                themeJS: {
                    // 当前主题是否启用了主题 JavaScript
                    type: 'boolean',
                    description: 'Whether the current theme has enabled theme JavaScript',
                },
                themeLight: {
                    // 当前使用的亮色主题名称
                    type: 'string',
                    description: 'The name of the light theme currently in use',
                },
                themeVer: {
                    // 当前使用的主题的版本号
                    type: 'string',
                    description: 'The version number of the theme currently in use',
                },
            },
        },
        bazaar: {
            title: 'IBazaar',
            type: 'object',

            description: 'SiYuan bazaar related configuration',
            additionalProperties: false,
            required: ['petalDisabled', 'trust'],
            properties: {
                petalDisabled: {
                    // 是否禁用所有插件
                    type: 'boolean',
                    description: 'Whether to disable all plug-ins',
                },
                trust: {
                    // 是否信任(启用)集市资源
                    type: 'boolean',
                    description: 'Whether to trust (enable) the resources for the bazaar',
                },
            },
        },
        lang: {
            title: 'ILang',
            type: 'object',

            description: 'Supported language',
            additionalProperties: false,
            required: ['label', 'name'],
            properties: {
                label: {
                    // 语言名称
                    type: 'string',
                    description: 'Language name',
                    examples: ['简体中文', '繁体中文', 'English'],
                },
                name: {
                    // 语言标识
                    type: 'string',
                    description: 'Language identifier',
                    pattern: '^[a-z]{2}_[A-Z]{2,}$',
                    examples: ['zh_CN', 'zh_CHT', 'en_US'],
                },
            },
        },
        snippet: {
            title: 'ISnippet',
            type: 'object',

            description: 'SiYuan code snippets related configuration',
            additionalProperties: false,
            required: ['enabledCSS', 'enabledJS'],
            properties: {
                enabledCSS: {
                    // 是否启用 CSS 代码片段
                    type: 'boolean',
                    description: 'Whether to enable CSS code snippets',
                },
                enabledJS: {
                    // 是否启用 JavaScript 代码片段
                    type: 'boolean',
                    description: 'Whether to enable JavaScript code snippets',
                },
            },
        },
        tag: {
            title: 'ITag',
            type: 'object',

            description: 'SiYuan tag dock related configuration',
            additionalProperties: false,
            required: ['sort'],
            properties: {
                sort: {
                    type: 'integer',
                    description: 'Tag sorting scheme\n- `0`: Name alphabetically ascending\n- `1`: Name alphabetically descending\n- `4`: Name natural ascending\n- `5`: Name natural descending\n- `7`: Reference count ascending\n- `8`: Reference count descending',
                    default: 4,
                    enum: [
                        0, // 名称字母升序
                        1, // 名称字母降序
                        4, // 名称自然数升序
                        5, // 名称自然数降序
                        7, // 引用数升序
                        8, // 引用数降序
                    ],
                },
            },
        },
    },
}
