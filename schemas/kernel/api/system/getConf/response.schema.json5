/**
 * schemas/kernel/api/system/getConf/response.schema.json5
 * 获取工作空间完整配置
 * REF: https://github.com/siyuan-note/siyuan/blob/v3.0.2/kernel/api/system.go#L206-L225
 * @pathname: /api/system/getConf
 * @version: 3.0.2
 */
{
    $schema: 'https://json-schema.org/draft/2020-12/schema',
    $id: 'https://github.com/siyuan-community/siyuan-sdk/raw/main/schemas/kernel/api/system/getConf/response.schema.json5',
    $comment: 'v3.0.2',
    $ref: '#/$defs/root',
    $defs: {
        root: {
            title: 'response body',
            description: '',

            type: 'object',
            additionalProperties: false,
            required: ['code', 'msg', 'data'],
            properties: {
                code: {
                    type: 'integer',
                    description: 'status code',
                },
                msg: {
                    type: 'string',
                    description: 'status message',
                },
                data: {
                    $ref: '#/$defs/data',
                },
            },
        },
        data: {
            title: 'IData',
            description: 'response data',

            type: 'object',
            additionalProperties: false,
            required: ['start', 'conf'],
            properties: {
                start: {
                    // 是否未加载用户界面
                    type: 'boolean',
                    description: 'Whether the user interface is not loaded',
                },
                conf: {
                    // 配置对象
                    $ref: '#/$defs/conf',
                },
            },
        },
        conf: {
            title: 'IConf',
            description: 'Configuration object',

            type: 'object',
            additionalProperties: false,
            required: ['accessAuthCode', 'account', 'ai', 'api', 'appearance', 'bazaar', 'cloudRegion', 'editor', 'export', 'fileTree', 'flashcard', 'graph', 'keymap', 'lang', 'langs', 'localIPs', 'logLevel', 'openHelp', 'readonly', 'repo', 'search', 'showChangelog', 'snippet', 'stat', 'sync', 'system', 'tag', 'uiLayout', 'userData'],
            properties: {
                accessAuthCode: {
                    // 访问授权码
                    type: 'string',
                    description: 'Access authorization code',
                    default: '',
                    enum: ['', '*******'],
                },
                account: {
                    // 账户相关设置项
                    $ref: '#/$defs/account',
                },
                ai: {
                    // AI 相关设置项
                    $ref: '#/$defs/ai',
                },
                api: {
                    // 思源 API 相关设置项
                    $ref: '#/$defs/api',
                },
                appearance: {
                    // 外观相关设置项
                    $ref: '#/$defs/appearance',
                },
                bazaar: {
                    // 思源集市相关设置项
                    $ref: '#/$defs/bazaar',
                },
                cloudRegion: {
                    // 云服务供应商地区
                    type: 'integer',
                    description: 'Cloud Service Provider Region\n- `0`: Chinese mainland\n- `1`: North America',
                    enum: [0, 1],
                },
                editor: {
                    // 编辑器相关设置项
                    $ref: '#/$defs/editor',
                },
                export: {
                    // 导出相关设置项
                    $ref: '#/$defs/export',
                },
                fileTree: {
                    // TODO
                },
                flashcard: {
                    // TODO
                },
                graph: {
                    // TODO
                },
                keymap: {
                    // TODO
                },
                lang: {
                    // 界面语言
                    title: 'TLang',
                    type: 'string',
                    description: 'User interface language  \nSame as {@link IAppearance.lang}',
                    enum: [
                        'en_US', // 英文
                        'es_ES', // 西班牙文
                        'fr_FR', // 法文
                        'zh_CHT', // 繁体中文
                        'zh_CN', // 简体中文
                    ],
                },
                langs: {
                    // 支持的语言列表
                    type: 'array',
                    description: 'List of supported languages',
                    items: {
                        $ref: '#/$defs/lang',
                    },
                },
                localIPs: {
                    // 内核所在设备 IP 列表
                    type: 'array',
                    description: 'A list of the IP addresses of the devices on which the kernel resides',
                    items: {
                        type: 'string',
                        description: 'IP addresses (IPv4 & IPv6)',
                        examples: [
                            '127.0.0.1', //
                            '192.168.1.1', //
                            '10.0.0.1', //
                            '[::1]', //
                            '[fe80::8cc:2a8:23fc:daf3]', //
                        ],
                    },
                },
                logLevel: {
                    // 日志级别
                    title: 'TLogLevel',
                    type: 'string',
                    description: 'Log level',
                    enum: [
                        'off', // 无日志
                        'trace', // 少量
                        'debug', // 调试
                        'info', // 信息
                        'warn', // 警告
                        'error', // 错误
                        'fatal', // 致命
                    ],
                },
                openHelp: {
                    // 启动后是否需要打开用户指南
                    type: 'boolean',
                    description: 'Whether to open the user guide after startup',
                },
                readonly: {
                    // 是否是以只读模式运行
                    type: 'boolean',
                    description: 'Whether it is running in read-only mode',
                },
                repo: {
                    // 快照仓库相关设置项
                    $ref: '#/$defs/repo',
                },
                search: {
                    // TODO
                },
                showChangelog: {
                    // 是否显示本版本更新日志
                    type: 'boolean',
                    description: 'Whether to display the changelog for this release version',
                },
                snippet: {
                    // 代码片段相关设置项
                    $ref: '#/$defs/snippet',
                },
                stat: {
                    // 工作空间内容统计
                    $ref: '#/$defs/stat',
                },
                sync: {
                    // TODO
                },
                system: {
                    // TODO
                },
                tag: {
                    // 思源标签面板相关设置项
                    $ref: '#/$defs/tag',
                },
                uiLayout: {
                    // TODO
                },
                userData: {
                    // 社区用户信息
                    type: 'string',
                    description: 'Community user data (Encrypted)',
                    default: '',
                },
            },
        },
        account: {
            title: 'IAccount',
            description: 'Account configuration',

            type: 'object',
            additionalProperties: false,
            required: ['displayTitle', 'displayVIP'],
            properties: {
                displayTitle: {
                    // 顶栏显示头衔
                    type: 'boolean',
                    description: 'Display the title icon',
                },
                displayVIP: {
                    // 顶栏显示 VIP 图标
                    type: 'boolean',
                    description: 'Display the VIP icon',
                },
            },
        },
        ai: {
            title: 'IAi',
            type: 'object',

            description: 'Artificial Intelligence (AI) related configuration',
            additionalProperties: false,
            required: ['openAI'],
            properties: {
                openAI: {
                    $ref: '#/$defs/openAI',
                },
            },
        },
        openAI: {
            // Open AI 的 API 配置项
            title: 'IOpenAI',
            description: 'Open AI related configuration',

            type: 'object',
            additionalProperties: false,
            required: ['apiBaseURL', 'apiKey', 'apiMaxTokens', 'apiModel', 'apiProvider', 'apiProxy', 'apiTimeout', 'apiUserAgent', 'apiVersion'],
            properties: {
                apiBaseURL: {
                    // API 基础 URL 地址
                    type: 'string',
                    description: 'API base URL',
                    format: 'uri',
                    examples: ['https://api.openai.com/v1'],
                },
                apiKey: {
                    // API 密钥
                    type: 'string',
                    description: 'API key',
                    examples: ['sk-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKL'],
                },
                apiMaxTokens: {
                    // 最大 Token 数 (0 表示无限制)
                    type: 'integer',
                    description: 'Maximum number of tokens (0 means no limit)',
                    minimum: 0,
                },
                apiModel: {
                    // API 所调用的模型名称
                    title: 'TOpenAIModel',
                    type: 'string',
                    description: 'The model name called by the API',
                    enum: ['gpt-4', 'gpt-4-32k', 'gpt-3.5-turbo', 'gpt-3.5-turbo-16k'],
                },
                apiProvider: {
                    // API 供应商
                    type: 'string',
                    description: 'API Provider',
                    enum: ['OpenAI', 'Azure'],
                },
                apiProxy: {
                    // API 请求代理地址
                    type: 'string',
                    description: 'API request proxy address',
                    examples: ['http://127.0.0.1:1080', 'socks://127.0.0.1:1080', 'socks5://127.0.0.1:1080'],
                },
                apiTimeout: {
                    // API 请求超时时间 (单位: 秒)
                    type: 'integer',
                    description: 'API request timeout (unit: seconds)',
                    minimum: 0,
                },
                apiUserAgent: {
                    // API 请求附加的用户代理字段
                    type: 'string',
                    description: 'API request additional user agent field',
                },
                apiVersion: {
                    // API 版本号
                    type: 'string',
                    description: 'API version number',
                },
            },
        },
        api: {
            title: 'IApi',
            type: 'object',

            description: 'SiYuan API related configuration',
            additionalProperties: false,
            required: ['token'],
            properties: {
                token: {
                    type: 'string',
                    description: 'API Token',
                    examples: ['', '0123456789abcdef'],
                },
            },
        },
        appearance: {
            title: 'IAppearance',
            type: 'object',

            description: 'SiYuan appearance related configuration',
            additionalProperties: false,
            required: ['closeButtonBehavior', 'codeBlockThemeDark', 'codeBlockThemeLight', 'darkThemes', 'hideStatusBar', 'icon', 'iconVer', 'icons', 'lang', 'lightThemes', 'mode', 'modeOS', 'themeDark', 'themeJS', 'themeLight', 'themeVer'],
            properties: {
                closeButtonBehavior: {
                    // 关闭按钮行为
                    type: 'integer',
                    description: 'Close button behavior\n- `0`: Exit application\n- `1`: Minimize to pallets',
                    enum: [
                        0, // 退出应用
                        1, // 最小化到托盘
                    ],
                },
                codeBlockThemeDark: {
                    // 暗色代码块主题
                    type: 'string',
                    description: 'Dark code block theme',
                },
                codeBlockThemeLight: {
                    // 亮色代码块主题
                    type: 'string',
                    description: 'Light code block theme',
                },
                darkThemes: {
                    // 已安装的暗色主题名称列表
                    type: 'array',
                    description: 'List of installed dark themes',
                    items: {
                        type: 'string',
                        description: 'Dark theme name',
                    },
                },
                hideStatusBar: {
                    // 是否隐藏状态栏
                    type: 'boolean',
                    description: 'Whether to hide status bar',
                },
                icon: {
                    // 当前使用的图标名称
                    type: 'string',
                    description: 'The name of the icon currently in use',
                },
                iconVer: {
                    // 当前使用的图标的版本号
                    type: 'string',
                    description: 'The version number of the icon currently in use',
                },
                icons: {
                    // 已安装的图标名称列表
                    type: 'array',
                    description: 'List of installed icon names',
                    items: {
                        type: 'string',
                        description: 'Icon name',
                    },
                },
                lang: {
                    // 当前用户界面所使用的语言
                    type: 'string',
                    description: 'The language used by the current user',
                    enum: [
                        'en_US', // 英文
                        'es_ES', // 西班牙文
                        'fr_FR', // 法文
                        'zh_CHT', // 繁体中文
                        'zh_CN', // 简体中文
                    ],
                },
                lightThemes: {
                    // 已安装的亮色主题名称列表
                    type: 'array',
                    description: 'List of installed light themes',
                    items: {
                        type: 'string',
                        description: 'Light theme name',
                    },
                },
                mode: {
                    // 当前使用的主题模式
                    type: 'integer',
                    description: 'The current theme mode\n- `0`: Light theme\n- `1`: Dark theme',
                    enum: [
                        0, // 亮色主题
                        1, // 暗色主题
                    ],
                },
                modeOS: {
                    // 主题模式是否跟随系统主题
                    type: 'boolean',
                    description: 'Whether the theme mode follows the system theme',
                },
                themeDark: {
                    // 当前使用的暗色主题名称
                    type: 'string',
                    description: 'The name of the dark theme currently in use',
                },
                themeJS: {
                    // 当前主题是否启用了主题 JavaScript
                    type: 'boolean',
                    description: 'Whether the current theme has enabled theme JavaScript',
                },
                themeLight: {
                    // 当前使用的亮色主题名称
                    type: 'string',
                    description: 'The name of the light theme currently in use',
                },
                themeVer: {
                    // 当前使用的主题的版本号
                    type: 'string',
                    description: 'The version number of the theme currently in use',
                },
            },
        },
        bazaar: {
            title: 'IBazaar',
            type: 'object',

            description: 'SiYuan bazaar related configuration',
            additionalProperties: false,
            required: ['petalDisabled', 'trust'],
            properties: {
                petalDisabled: {
                    // 是否禁用所有插件
                    type: 'boolean',
                    description: 'Whether to disable all plug-ins',
                },
                trust: {
                    // 是否信任(启用)集市资源
                    type: 'boolean',
                    description: 'Whether to trust (enable) the resources for the bazaar',
                },
            },
        },
        editor: {
            title: 'IEditor',
            type: 'object',

            description: 'SiYuan editor related configuration',
            additionalProperties: false,
            required: ['backlinkExpandCount', 'backmentionExpandCount', 'blockRefDynamicAnchorTextMaxLen', 'codeLigatures', 'codeLineWrap', 'codeSyntaxHighlightLineNum', 'codeTabSpaces', 'displayBookmarkIcon', 'displayNetImgMark', 'dynamicLoadBlocks', 'embedBlockBreadcrumb', 'emoji', 'floatWindowMode', 'fontFamily', 'fontSize', 'fontSizeScrollZoom', 'fullWidth', 'generateHistoryInterval', 'historyRetentionDays', 'justify', 'katexMacros', 'listItemDotNumberClickFocus', 'listLogicalOutdent', 'onlySearchForDoc', 'plantUMLServePath', 'readOnly', 'rtl', 'spellcheck', 'virtualBlockRef', 'virtualBlockRefExclude', 'virtualBlockRefInclude'],
            properties: {
                backlinkExpandCount: {
                    // 反向链接默认展开数量
                    type: 'integer',
                    description: 'The default number of backlinks to expand',
                },
                backmentionExpandCount: {
                    // 反向链接提及默认展开数量
                    type: 'integer',
                    description: 'The default number of backlinks to mention',
                },
                blockRefDynamicAnchorTextMaxLen: {
                    // 块引用的动态锚文本最大长度
                    type: 'integer',
                    description: 'The maximum length of the dynamic anchor text for block references',
                },
                codeLigatures: {
                    // 代码块是否启用连字符号
                    type: 'boolean',
                    description: 'Whether the code block has enabled ligatures',
                },
                codeLineWrap: {
                    // 代码块是否自动折行
                    type: 'boolean',
                    description: 'Whether the code block is automatically wrapped',
                },
                codeSyntaxHighlightLineNum: {
                    // 代码块是否显示行号
                    type: 'boolean',
                    description: 'Whether the code block displays line numbers',
                },
                codeTabSpaces: {
                    // 代码块中 Tab 键生成的空格数，配置为 0 则表示不转换为空格
                    type: 'integer',
                    description: 'The number of spaces generated by the Tab key in the code block, configured as 0 means no conversion to spaces',
                    minimum: 0,
                },
                displayBookmarkIcon: {
                    // 是否显示书签图标
                    type: 'boolean',
                    description: 'Whether to display the bookmark icon',
                },
                displayNetImgMark: {
                    // 是否显示网络图片标记
                    type: 'boolean',
                    description: 'Whether to display the network image mark',
                },
                dynamicLoadBlocks: {
                    // 每次动态加载时加载的块数量
                    type: 'integer',
                    description: 'The number of blocks loaded each time they are dynamically loaded',
                    minimum: 48,
                    maximum: 1024,
                },
                embedBlockBreadcrumb: {
                    // 嵌入块是否显示面包屑
                    type: 'boolean',
                    description: 'Whether the embedded block displays breadcrumbs',
                },
                emoji: {
                    // 常用的表情图标
                    type: 'array',
                    description: 'Common emoji icons',
                    items: {
                        type: 'string',
                        description: 'Emoji icon',
                        examples: [
                            '1f4da', // Emoji 字符的十六进制 Unicode 编码
                            'material/folder-project.svg', // 引用的自定义图标的路径
                        ],
                    },
                },
                floatWindowMode: {
                    // 预览浮窗的触发模式
                    type: 'integer',
                    description: 'The trigger mode of the preview window\n- `0`: Hover over the cursor\n- `1`: Hover over the cursor while holding down Ctrl\n- `2`: Do not trigger the floating window',
                    enum: [
                        0, // 光标悬停
                        1, // 按住 Ctrl 悬停
                        2, // 不触发浮窗
                    ],
                },
                fontFamily: {
                    // 编辑器中所使用的字体
                    type: 'string',
                    description: 'The font used in the editor',
                },
                fontSize: {
                    // 编辑器中所使用的字号
                    type: 'integer',
                    description: 'The font size used in the editor',
                },
                fontSizeScrollZoom: {
                    // 是否开启使用鼠标滚轮调整编辑器字号
                    type: 'boolean',
                    description: 'Whether to enable the use of the mouse wheel to adjust the font size of the editor',
                },
                fullWidth: {
                    // 编辑器是否使用最大宽度
                    type: 'boolean',
                    description: 'Whether the editor uses maximum width',
                },
                generateHistoryInterval: {
                    // 生成文档历史的时间间隔, 设置为 0 禁用文档历史 (单位: 分钟)
                    type: 'integer',
                    description: 'The time interval for generating document history, set to 0 to disable document history (unit: minutes)',
                    minimum: 0,
                },
                historyRetentionDays: {
                    // 历史保留天数
                    type: 'integer',
                    description: 'History retention days',
                },
                justify: {
                    // 是否启用文本两端对齐
                    type: 'boolean',
                    description: 'Whether to enable text justification',
                },
                katexMacros: {
                    // KeTex 宏定义 (JSON 字符串)
                    type: 'string',
                    description: 'KeTex macro definition (JSON string)',
                },
                listItemDotNumberClickFocus: {
                    // 是否启用单击列表项标记聚焦
                    type: 'boolean',
                    description: 'Whether to enable single-click list item mark focus',
                },
                listLogicalOutdent: {
                    // 是否启用列表逻辑反向缩进方案
                    type: 'boolean',
                    description: 'Whether to enable the list logical reverse indentation scheme',
                },
                onlySearchForDoc: {
                    // 是否启用 [[ 符号仅搜索文档块
                    type: 'boolean',
                    description: 'Whether to enable the `[[` symbol to search only for document blocks',
                },
                plantUMLServePath: {
                    // PlantUML 渲染服务地址
                    type: 'string',
                    description: 'PlantUML rendering service address',
                },
                readOnly: {
                    // 是否启用只读模式
                    type: 'boolean',
                    description: 'Whether to enable read-only mode',
                },
                rtl: {
                    // 是否启用 RTL (左向书写) 模式
                    type: 'boolean',
                    description: 'Whether to enable RTL (left-to-right chirography) mode',
                },
                spellcheck: {
                    // 是否启用拼写检查
                    type: 'boolean',
                    description: 'Whether to enable spell checking',
                },
                virtualBlockRef: {
                    // 是否启用虚拟引用
                    type: 'boolean',
                    description: 'Whether to enable virtual references',
                },
                virtualBlockRefExclude: {
                    // 虚拟引用关键字排除列表 (关键字之间使用 , 符号分隔)
                    type: 'string',
                    description: 'Virtual reference keyword exclusion list (separated by commas `,`)',
                },
                virtualBlockRefInclude: {
                    // 虚拟引用关键字包含列表 (关键字之间使用 , 符号分隔)
                    type: 'string',
                    description: 'Virtual reference keyword inclusion list (separated by commas `,`)',
                },
            },
        },
        export: {
            title: 'IExport',
            type: 'object',

            description: 'SiYuan export related configuration',
            additionalProperties: false,
            required: ['paragraphBeginningSpace', 'addTitle', 'blockRefMode', 'blockEmbedMode', 'blockRefTextLeft', 'blockRefTextRight', 'tagOpenMarker', 'tagCloseMarker', 'fileAnnotationRefMode', 'pandocBin', 'markdownYFM', 'pdfFooter', 'docxTemplate', 'pdfWatermarkStr', 'pdfWatermarkDesc', 'imageWatermarkStr', 'imageWatermarkDesc'],
            properties: {
                paragraphBeginningSpace: {
                    // 段落开头是否空两格 (段首插入两个全宽空格 `U+3000`)
                    type: 'boolean',
                    description: 'Whether the beginning of the paragraph is empty two spaces.\nInsert two full-width spaces `U+3000` at the beginning of the paragraph.',
                },
                addTitle: {
                    // 添加文章标题 (将文章标题作为第一级标题插入文档首部)
                    type: 'boolean',
                    description: 'Add article title (insert the article title as a first-level title at the beginning of the document)',
                },
                blockRefMode: {
                    // 内容块引用导出模式
                    type: 'integer',
                    description: 'Content block reference export mode\n- `0`: Original text (deprecated)\n- `1`: Quotation block (deprecated)\n- `2`: Anchor text block link\n- `3`: Anchor text only\n- `4`: Footnote\n- `5`: Anchor hash\n',
                    enum: [
                        0, // 原始文本 (已废弃)
                        1, // 引述块 (已废弃)
                        2, // 锚文本块链接
                        3, // 仅锚文本
                        4, // 脚注
                        5, // 锚点哈希
                    ],
                },
                blockEmbedMode: {
                    // 嵌入块导出模式
                    type: 'integer',
                    description: 'Embedded block export mode\n- `0`: Original block content\n- `1`: Quotation block',
                    enum: [
                        0, // 原始块内容
                        1, // 引述块
                    ],
                },
                blockRefTextLeft: {
                    // 导出时块引用锚文本左侧符号
                    type: 'string',
                    description: 'The symbol on the left side of the block reference anchor text during export',
                },
                blockRefTextRight: {
                    // 导出时块引用锚文本右侧符号
                    type: 'string',
                    description: 'The symbol on the right side of the block reference anchor text during export',
                },
                tagOpenMarker: {
                    // 标签开始标记符号
                    type: 'string',
                    description: 'Tag start marker symbol',
                },
                tagCloseMarker: {
                    // 标签闭合标记符号
                    type: 'string',
                    description: 'Tag close marker symbol',
                },
                fileAnnotationRefMode: {
                    // 文件标注引用导出模式
                    type: 'integer',
                    description: 'File annotation reference export mode\n- `0`: File name - page number - anchor text\n- `1`: Anchor text only',
                    enum: [
                        0, // 文件名 - 页码 - 锚文本
                        1, // 仅锚文本
                    ],
                },
                pandocBin: {
                    // Pandoc 可执行文件路径
                    type: 'string',
                    description: 'Pandoc executable file path',
                },
                markdownYFM: {
                    // Markdown 导出时是否添加 YAML Front Matter
                    type: 'boolean',
                    description: 'Whether to add YAML Front Matter when exporting to Markdown',
                },
                pdfFooter: {
                    // 自定义 PDF 导出时的页脚内容
                    type: 'string',
                    description: 'Custom footer content when exporting to PDF',
                },
                docxTemplate: {
                    // Docx 导出时所使用的模板文件路径
                    type: 'string',
                    description: 'The path of the template file used when exporting to Docx',
                },
                pdfWatermarkStr: {
                    // 导出 PDF 时所使用的水印文本或水印文件路径
                    type: 'string',
                    description: 'The watermark text or watermark file path used when exporting to PDF',
                },
                pdfWatermarkDesc: {
                    // 自定义导出 PDF 时水印的位置、大小和样式等
                    type: 'string',
                    description: 'Custom watermark position, size, style, etc. when exporting to PDF',
                },
                imageWatermarkStr: {
                    // 导出图片时所使用的水印文本或水印文件路径
                    type: 'string',
                    description: 'The watermark text or watermark file path used when exporting to an image',
                },
                imageWatermarkDesc: {
                    // 自定义导出图片时水印的位置、大小和样式等
                    type: 'string',
                    description: 'Custom watermark position, size, style, etc. when exporting to an image',
                },
            },
        },
        lang: {
            title: 'ILang',
            type: 'object',

            description: 'Supported language',
            additionalProperties: false,
            required: ['label', 'name'],
            properties: {
                label: {
                    // 语言名称
                    type: 'string',
                    description: 'Language name',
                    examples: ['简体中文', '繁体中文', 'English'],
                },
                name: {
                    // 语言标识
                    type: 'string',
                    description: 'Language identifier',
                    pattern: '^[a-z]{2}_[A-Z]{2,}$',
                    examples: ['zh_CN', 'zh_CHT', 'en_US'],
                },
            },
        },
        repo: {
            title: 'IRepo',
            type: 'object',

            description: 'Snapshot repository related configuration',
            additionalProperties: false,
            required: ['key', 'syncIndexTiming'],
            properties: {
                key: {
                    // 快照加密密钥 (base64 编码的 256 位密钥)
                    type: 'string',
                    description: 'Snapshot encryption key (base64 encoded 256-bit key)',
                    pattern: '^[A-Za-z0-9+/]{43}=$',
                },
                syncIndexTiming: {
                    // 同步索引计时，超过该时间则提示用户索引性能下降 (单位: 毫秒)
                    type: 'integer',
                    description: 'Synchronous index timing, if it exceeds this time, the user is prompted that the index performance is degraded (unit: milliseconds)',
                },
            },
        },
        snippet: {
            title: 'ISnippet',
            type: 'object',

            description: 'SiYuan code snippets related configuration',
            additionalProperties: false,
            required: ['enabledCSS', 'enabledJS'],
            properties: {
                enabledCSS: {
                    // 是否启用 CSS 代码片段
                    type: 'boolean',
                    description: 'Whether to enable CSS code snippets',
                },
                enabledJS: {
                    // 是否启用 JavaScript 代码片段
                    type: 'boolean',
                    description: 'Whether to enable JavaScript code snippets',
                },
            },
        },
        stat: {
            title: 'IStat',
            type: 'object',

            description: 'SiYuan workspace content statistics',
            additionalProperties: false,
            required: ['assetsSize', 'blockCount', 'cAssetsSize', 'cBlockCount', 'cDataSize', 'cTreeCount', 'dataSize', 'treeCount'],
            properties: {
                assetsSize: {
                    // 资源文件大小 (单位: 字节)
                    type: 'integer',
                    description: 'Asset file size (unit: bytes)',
                },
                blockCount: {
                    // 内容块数量
                    type: 'integer',
                    description: 'Number of content blocks',
                },
                cAssetsSize: {
                    // 分块加密后的资源文件大小 (单位: 字节)
                    type: 'integer',
                    description: 'Size of resource files after chunk encryption (unit: bytes)',
                },
                cBlockCount: {
                    // 分块加密后的内容块数量
                    type: 'integer',
                    description: 'Number of content blocks after chunk encryption',
                },
                cDataSize: {
                    // 分块加密后的数据目录大小 (单位: 字节)
                    type: 'integer',
                    description: 'Size of the data directory after chunk encryption (unit: bytes)',
                },
                cTreeCount: {
                    // 分块加密后的内容块树数量 (文档数量)
                    type: 'integer',
                    description: 'Number of content block trees after chunk encryption (number of documents)',
                },
                dataSize: {
                    // 数据目录大小 (单位: 字节)
                    type: 'integer',
                    description: 'Data directory size (unit: bytes)',
                },
                treeCount: {
                    // 内容块树数量 (文档数量)
                    type: 'integer',
                    description: 'Number of content block trees (number of documents)',
                },
            },
        },
        tag: {
            title: 'ITag',
            type: 'object',

            description: 'SiYuan tag dock related configuration',
            additionalProperties: false,
            required: ['sort'],
            properties: {
                sort: {
                    type: 'integer',
                    description: 'Tag sorting scheme\n- `0`: Name alphabetically ascending\n- `1`: Name alphabetically descending\n- `4`: Name natural ascending\n- `5`: Name natural descending\n- `7`: Reference count ascending\n- `8`: Reference count descending',
                    default: 4,
                    enum: [
                        0, // 名称字母升序
                        1, // 名称字母降序
                        4, // 名称自然数升序
                        5, // 名称自然数降序
                        7, // 引用数升序
                        8, // 引用数降序
                    ],
                },
            },
        },
    },
}
